# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker


resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '7fb56d7e-07ab-4613-bdec-82f62b326aa1'
  imageRepository: 'ninallampipelinesjavascriptdocker'
  containerRegistry: 'nikitacontainer.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'nikitacontainer37ef-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Shellpp@0
      inputs:
        type: 'InlineScript'
        script: |
          url="https://dev.azure.com/ninallam/Kubernetes/_apis/build/retention/leases?api-version=6.0-preview.1"
          contentType="Content-Type: application/json"
          bearerToken="Authorization: Bearer b2zroacdhvyspqyt4jtnsmwgdls6urjytfhbs5o4m47eljahn4la"
           
          getUrl="${url}&ownerId=ninallam&definitionId=$(Build.BuildId)&runId=$Build.BuildNumber
          
          json=$(curl -fsS "${getUrl}" -H "${bearerToken}")
          count=$(echo $json | jq '.count')
           
          if [ $count == 1 ]; then
              echo 'Retention lease already exists'
          else
              echo 'Retention lease does not exist yet' 
              data="[{ \"daysValid\": 2, \"runId\": $Build.BuildNumber , \"definitionId\": $Build.BuildId, \"ownerId\": \"ninallam\", \"protectPipeline\": true }]
           
              echo Sending data: $data
           
              curl -fsS -X POST "${url}" -H "${contentType}" -H "${bearerToken}" -d "${data}"
          fi

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'ninallampipelinesjavascriptdocker.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

